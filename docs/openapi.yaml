openapi: 3.0.0
info:
  title: Miro Clone API
  description: API for a collaborative whiteboard application similar to Miro
  version: 1.0.0
servers:
  - url: /api
    description: Default API server

tags:
  - name: Auth
    description: Authentication and user management operations
  - name: User
    description: User operations
  - name: Board
    description: Board management operations
  - name: Canvas
    description: Canvas object operations
  - name: Cursor
    description: Real-time cursor position operations

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        email:
          type: string
          format: email
          description: User's email address
        created_at:
          type: string
          format: date-time
          description: Timestamp when the user was created
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the user was last updated
      required:
        - id
        - email
        - created_at
        - updated_at

    Board:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the board
        owner_id:
          type: string
          format: uuid
          description: User ID of the board owner
        title:
          type: string
          description: Title of the board
        created_at:
          type: string
          format: date-time
          description: Timestamp when the board was created
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the board was last updated
      required:
        - id
        - owner_id
        - title
        - created_at
        - updated_at

    BoardObject:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the object
        type:
          type: string
          description: Type of object (card, shape, etc.)
        position:
          type: object
          properties:
            x:
              type: number
              description: X-coordinate position
            y:
              type: number
              description: Y-coordinate position
          required:
            - x
            - y
        size:
          type: object
          properties:
            width:
              type: number
              description: Width of the object
            height:
              type: number
              description: Height of the object
          required:
            - width
            - height
        content:
          type: string
          description: Content of the object
        created_by:
          type: string
          format: uuid
          description: User ID who created this object
        board_id:
          type: string
          format: uuid
          description: Board ID this object belongs to
        z_index:
          type: integer
          description: Z-index for layering objects
      required:
        - id
        - type
        - position
        - created_by
        - board_id

    CursorPosition:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          description: User ID of the cursor owner
        x:
          type: number
          description: X-coordinate position
        y:
          type: number
          description: Y-coordinate position
      required:
        - user_id
        - x
        - y

paths:
  /register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'

  /login:
    post:
      tags:
        - Auth
      summary: Login to the application
      description: Authenticate user and create a session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  session_id:
                    type: string
                    format: uuid

  /logout:
    post:
      tags:
        - Auth
      summary: Logout from the application
      description: End the current user session
      responses:
        '200':
          description: Logout successful

  /password:
    post:
      tags:
        - Auth
      summary: Change user password
      description: Update the current user's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  format: password
                new_password:
                  type: string
                  format: password
              required:
                - current_password
                - new_password
      responses:
        '200':
          description: Password changed successfully

  /me:
    get:
      tags:
        - Auth
      summary: Get current user information
      description: Retrieve information about the currently authenticated user
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      tags:
        - User
      summary: Get user information
      description: Retrieve information about a specific user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /boards:
    get:
      tags:
        - Board
      summary: List boards
      description: Get a list of boards accessible by the current user
      responses:
        '200':
          description: List of boards retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Board'

    post:
      tags:
        - Board
      summary: Create board
      description: Create a new board
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
              required:
                - title
      responses:
        '201':
          description: Board created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'

  /boards/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Board ID

    get:
      tags:
        - Board
      summary: Get board details
      description: Retrieve details about a specific board
      responses:
        '200':
          description: Board details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'

    patch:
      tags:
        - Board
      summary: Update board
      description: Update a board's information (title, etc.)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
      responses:
        '200':
          description: Board updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Board'

    delete:
      tags:
        - Board
      summary: Delete board
      description: Delete a specific board
      responses:
        '200':
          description: Board deleted successfully

  /boards/{board_id}/objects:
    parameters:
      - name: board_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Board ID

    get:
      tags:
        - Canvas
      summary: List board objects
      description: Get a list of objects on a specific board
      responses:
        '200':
          description: List of board objects retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BoardObject'

    post:
      tags:
        - Canvas
      summary: Create board object
      description: Add a new object to the board (card, shape, etc.)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: Type of object (card, shape, etc.)
                position:
                  type: object
                  properties:
                    x:
                      type: number
                    y:
                      type: number
                size:
                  type: object
                  properties:
                    width:
                      type: number
                    height:
                      type: number
                content:
                  type: string
              required:
                - type
                - position
      responses:
        '201':
          description: Board object created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardObject'

  /boards/{board_id}/objects/{object_id}:
    parameters:
      - name: board_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Board ID
      - name: object_id
        in: path
        required: true
        schema:
          type: string
        description: Object ID

    patch:
      tags:
        - Canvas
      summary: Update board object
      description: Update an object's position or content on the board
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                position:
                  type: object
                  properties:
                    x:
                      type: number
                    y:
                      type: number
                size:
                  type: object
                  properties:
                    width:
                      type: number
                    height:
                      type: number
                content:
                  type: string
                z_index:
                  type: integer
      responses:
        '200':
          description: Board object updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardObject'

    delete:
      tags:
        - Canvas
      summary: Delete board object
      description: Remove an object from the board
      responses:
        '200':
          description: Board object deleted successfully

  /boards/{board_id}/cursors:
    parameters:
      - name: board_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Board ID

    get:
      tags:
        - Cursor
      summary: Get cursor positions
      description: Get cursor positions of other users on the board
      responses:
        '200':
          description: Cursor positions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CursorPosition'

    post:
      tags:
        - Cursor
      summary: Update cursor position
      description: Send current user's cursor position
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                x:
                  type: number
                y:
                  type: number
              required:
                - x
                - y
      responses:
        '200':
          description: Cursor position updated successfully
