/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Create a new user account
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: email */
                        email: string;
                        /** Format: password */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description User successfully registered */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            user?: components["schemas"]["User"];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login to the application
         * @description Authenticate user and create a session
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: email */
                        email: string;
                        /** Format: password */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            user?: components["schemas"]["User"];
                            /** Format: uuid */
                            session_id?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout from the application
         * @description End the current user session
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Logout successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change user password
         * @description Update the current user's password
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: password */
                        current_password: string;
                        /** Format: password */
                        new_password: string;
                    };
                };
            };
            responses: {
                /** @description Password changed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user information
         * @description Retrieve information about the currently authenticated user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User information retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user information
         * @description Retrieve information about a specific user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User information retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List boards
         * @description Get a list of boards accessible by the current user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of boards retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Board"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create board
         * @description Create a new board
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        title: string;
                    };
                };
            };
            responses: {
                /** @description Board created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Board"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Board ID */
                id: string;
            };
            cookie?: never;
        };
        /**
         * Get board details
         * @description Retrieve details about a specific board
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Board ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Board details retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Board"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete board
         * @description Delete a specific board
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Board ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Board deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update board
         * @description Update a board's information (title, etc.)
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Board ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        title?: string;
                    };
                };
            };
            responses: {
                /** @description Board updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Board"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/boards/{board_id}/objects": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Board ID */
                board_id: string;
            };
            cookie?: never;
        };
        /**
         * List board objects
         * @description Get a list of objects on a specific board
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Board ID */
                    board_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of board objects retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BoardObject"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create board object
         * @description Add a new object to the board (card, shape, etc.)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Board ID */
                    board_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Type of object (card, shape, etc.) */
                        type: string;
                        position: {
                            x?: number;
                            y?: number;
                        };
                        size?: {
                            width?: number;
                            height?: number;
                        };
                        content?: string;
                    };
                };
            };
            responses: {
                /** @description Board object created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BoardObject"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boards/{board_id}/objects/{object_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Board ID */
                board_id: string;
                /** @description Object ID */
                object_id: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete board object
         * @description Remove an object from the board
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Board ID */
                    board_id: string;
                    /** @description Object ID */
                    object_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Board object deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update board object
         * @description Update an object's position or content on the board
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Board ID */
                    board_id: string;
                    /** @description Object ID */
                    object_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        position?: {
                            x?: number;
                            y?: number;
                        };
                        size?: {
                            width?: number;
                            height?: number;
                        };
                        content?: string;
                        z_index?: number;
                    };
                };
            };
            responses: {
                /** @description Board object updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BoardObject"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/boards/{board_id}/cursors": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Board ID */
                board_id: string;
            };
            cookie?: never;
        };
        /**
         * Get cursor positions
         * @description Get cursor positions of other users on the board
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Board ID */
                    board_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cursor positions retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CursorPosition"][];
                    };
                };
            };
        };
        put?: never;
        /**
         * Update cursor position
         * @description Send current user's cursor position
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Board ID */
                    board_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        x: number;
                        y: number;
                    };
                };
            };
            responses: {
                /** @description Cursor position updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            /**
             * Format: uuid
             * @description Unique identifier for the user
             */
            id: string;
            /**
             * Format: email
             * @description User's email address
             */
            email: string;
            /**
             * Format: date-time
             * @description Timestamp when the user was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Timestamp when the user was last updated
             */
            updated_at: string;
        };
        Board: {
            /**
             * Format: uuid
             * @description Unique identifier for the board
             */
            id: string;
            /**
             * Format: uuid
             * @description User ID of the board owner
             */
            owner_id: string;
            /** @description Title of the board */
            title: string;
            /**
             * Format: date-time
             * @description Timestamp when the board was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Timestamp when the board was last updated
             */
            updated_at: string;
        };
        BoardObject: {
            /** @description Unique identifier for the object */
            id: string;
            /** @description Type of object (card, shape, etc.) */
            type: string;
            position: {
                /** @description X-coordinate position */
                x: number;
                /** @description Y-coordinate position */
                y: number;
            };
            size?: {
                /** @description Width of the object */
                width: number;
                /** @description Height of the object */
                height: number;
            };
            /** @description Content of the object */
            content?: string;
            /**
             * Format: uuid
             * @description User ID who created this object
             */
            created_by: string;
            /**
             * Format: uuid
             * @description Board ID this object belongs to
             */
            board_id: string;
            /** @description Z-index for layering objects */
            z_index?: number;
        };
        CursorPosition: {
            /**
             * Format: uuid
             * @description User ID of the cursor owner
             */
            user_id: string;
            /** @description X-coordinate position */
            x: number;
            /** @description Y-coordinate position */
            y: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
